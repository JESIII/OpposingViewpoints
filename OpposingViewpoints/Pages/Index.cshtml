@page
@using OpposingViewpoints.Models;
@model IndexModel
@{
    ViewData["Title"] = "Search for opposing articles on controversial topics";
}
<div class="text-center">
    <h1 class="display-4">Search for opposing articles</h1>
    <div class="form">
        <form method="post" class="d-inline-flex justify-content-center" style="max-width:70%;">
            <input class="form-control" type="text" id="searchTerm" name="searchTerm" style="width:350px;" placeholder="Enter a topic you'd like opposing viewpoints on" />
            <input id="searchBtn" class="btn btn-secondary" type="submit" value="Submit" asp-page-handler="SearchArticles" />
        </form>
    </div>
    @if (Model.SearchesInCache)
    {
        <a>Recent Searches:</a>

        <br>
        @foreach (CacheModel cachedSearch in Model.CachedSearches.Values)
        {
            <a asp-page-handler="CachedArticles" asp-route-value="@cachedSearch.SearchTerm">@cachedSearch.SearchTerm</a>
            <br>
        }
    }

    <br />
    <h2>Popular Issues</h2>
    <div id="carouselExampleSlidesOnly" class="carousel-dark slide" data-bs-ride="carousel" style="margin: auto;width: 80%; height: 50%;" display="inline">
        <div class="carousel-inner">
            @foreach (var topic in Model.ControversialTopics)
            {
                <div class="carousel-item @(topic == Model.ControversialTopics.First() ? "active" : "")" style="width: 100%; height: 100%; overflow: hidden;">
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title"><a class="text" style="text-decoration: none;" href="@topic.link">@(topic.topic)</a></h5>
                        </div>
                        <a href="@topic.link"><img class="d-block w-100" src="@topic.image" alt="..." style="width: 800px; height: 400px; object-fit: cover; object-position: 50% 50%;"></a>
                        <div class="card-body">
                            <p>@(topic.description.Length > 200 ? topic.description.Substring(0, 200) + "..." : topic.description)</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

</div>
<script>
    let terms = ["climate change", "gun rights", "immigration", "womens rights", "LGBTQ+ rights", "abortion", "cancel culture", "free speech", "affirmative action", "animal testing", "legalization of drugs", "death sentence", "privacy and surveillance", "mandatory vaccinations", "wealth distribution", "artificial intelligence in the workforce", "cultural appropriation", "nuclear power", "religious freedom", "GMOs", "assisted suicide"]
    async function asyncWhileLoop() {
        let i = Math.floor(Math.random() * (terms.length - 1 - 0 + 1)) + 0;
        while (true) {
            if (i >= terms.length) {
                i = 0;
            }
            let term = terms[i];
            for (let j = 0; j < term.length + 1; j++) {
                document.getElementById("searchTerm").placeholder = term.substring(0, j);
                await new Promise(resolve => setTimeout(resolve, 50));
            }
            await new Promise(resolve => setTimeout(resolve, 2000));
            for (let j = term.length + 1; j >= 0; j--) {
                document.getElementById("searchTerm").placeholder = term.substring(0, j);
                await new Promise(resolve => setTimeout(resolve, 50));
            }
            await new Promise(resolve => setTimeout(resolve, 100));
            i++;
        }
    }
    asyncWhileLoop();
</script>